<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>basics on R &amp; Python</title>
    <link>https://kwhkim.github.io/RandPython/tags/basics/</link>
    <description>Recent content in basics on R &amp; Python</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 05 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kwhkim.github.io/RandPython/tags/basics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testing Category Python</title>
      <link>https://kwhkim.github.io/RandPython/2022/03/05/testing-category-python/</link>
      <pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kwhkim.github.io/RandPython/2022/03/05/testing-category-python/</guid>
      <description>
&lt;script src=&#34;https://kwhkim.github.io/RandPython/2022/03/05/testing-category-python/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;python과-r의-차이점&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Python과 R의 차이점&lt;/h1&gt;
&lt;div id=&#34;들여쓰기indentation의-구성도-중요함&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;들여쓰기(indentation)의 구성도 중요함&lt;/h2&gt;
&lt;p&gt;문서 편집기에서 눈에 보기에 줄이 맞아도 IndentationError가 발생할 수 있다. 코드 편집기에 따라 tab의 스페이스 개수가 다를 수 있다. 그리고 tab과 space는 같은 문자가 아니기 때문에 이 둘을 혼용할 경우에도 IndentationError가 발생한다. PEP&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;에 따르면 들여쓰기로 space 4개를 권장한다. 그리고 tab은 최대한 지양하는 것을 권장한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;여러-줄에-걸쳐-쓰기&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;여러 줄에 걸쳐 쓰기&lt;/h2&gt;
&lt;p&gt;R에서 하나의 표현식을 여러 줄에 걸쳐 쓰기 위해서는 단지 표현식 또는 함수가 그 줄에서 끝나지 않으면 된다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x = 1 + 
    2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;하지만 Python에서는 명시적인 줄바꿈 표시로 &lt;code&gt;\&lt;/code&gt;가 필요하다.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = 1 + \
    2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 &lt;code&gt;\&lt;/code&gt; 이후에는 어떤 문자도 없어야 한다. 공란(space)조차 SyntaxError를 발생시킨다.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = 1 + \
    2 + \
    3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 주석 처리가 약간 복잡해지는데, 다음을 보자.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = 1 + \
#   2 + \
    3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위의 코드를 실행시키면, SyntaxError가 발생하는데, 위의 코드는 사실 &lt;code&gt;x = 1 + #   2 + 3&lt;/code&gt;가 같기 때문이다(위의 코드를 파일로 저장하면 문자열로 &lt;code&gt;&#34;...\\\n#   2 + \\\n...&#34;&lt;/code&gt;와 같이 저장되는데 여기서 &lt;code&gt;&#34;\\\n&#34;&lt;/code&gt;만 제거한 결과로 생각하면 된다. 자세한 사항은 &lt;문자열&gt;장을 참고하자).&lt;/p&gt;
&lt;p&gt;Python에서 하나의 표현식 또는 함수를 여러 줄에 걸쳐 쓰려면 &lt;strong&gt;괄호를 마치지 않는 방법&lt;/strong&gt;이 더 편리한 듯 보인다. 이 방법은 주석 처리도 쉽기 때문에 몇몇 책들은 이 방법을 권장하고 있다.(!!!TODO: reference)&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = (1 + 
     2 + 
     3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = (1 + 
#     2 + 
     3)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;함수에서-return을-생략할-수-없다&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;함수에서 return을 생략할 수 없다&lt;/h2&gt;
&lt;p&gt;R에서 함수 마지막에 명시적으로 &lt;code&gt;return&lt;/code&gt;을 쓰지 않더라도, 가장 마지막에 계산된 값이 반환된다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test &amp;lt;- function(x){sum(x)/length(x)}
print(test(c(3,2,1)))
## [1] 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;하지만 python에서는 명시적으로 &lt;code&gt;return&lt;/code&gt;을 하지 않으면 &lt;code&gt;None&lt;/code&gt;이 반환된다.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def test(x):
    sum(x)/len(x)
print(test([3,2,1]))
## None&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다시 말해 python에서 &lt;code&gt;return&lt;/code&gt;은 선택적이 아니라 필수적이다.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def test(x):
    return sum(x)/len(x)
print(test([3,2,1]))
## 2.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;pandas.dataframe의-메소드의-기본-인자값은-axis0이다.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;pandas.DataFrame&lt;/code&gt;의 메소드의 기본 인자값은 &lt;code&gt;axis=0&lt;/code&gt;이다.&lt;/h2&gt;
&lt;p&gt;판다스 데이터프레임(DataFrame)의 축(행 또는 열) 이름을 변경하는 메소드 &lt;code&gt;.rename()&lt;/code&gt;과 같이 많은 판다스 데이터프레임의 메소드는 &lt;code&gt;axis=&lt;/code&gt; 매개변수가 있고, 이들의 기본값은 &lt;code&gt;axis=0&lt;/code&gt;이다. 예를 들어 &lt;code&gt;df.rename({&#39;x&#39;:&#39;x1&#39;, &#39;y&#39;:&#39;y1&#39;})&lt;/code&gt;라고 하면 행이름 중에서 &lt;code&gt;x&lt;/code&gt;를 &lt;code&gt;x1&lt;/code&gt;으로 바꾸고, &lt;code&gt;y&lt;/code&gt;를 &lt;code&gt;y1&lt;/code&gt;으로 바꾼다. 만약 열이름을 수정하고 싶다면, &lt;code&gt;axis=1&lt;/code&gt;을 쓰거나, &lt;code&gt;columns=&lt;/code&gt;에 수정할 열이름을 적어야 한다.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;df.rename({&amp;#39;x&amp;#39;:&amp;#39;x1&amp;#39;, &amp;#39;y&amp;#39;:&amp;#39;y1&amp;#39;}, axis=1)
df.rename(columns = {&amp;#39;x&amp;#39;:&amp;#39;x1&amp;#39;, &amp;#39;y&amp;#39;:&amp;#39;y1&amp;#39;})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;pandas.dataframe의-메소드는-기본적으로-결측값을-무시한다&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;pandas.DataFrame&lt;/code&gt;의 메소드는 기본적으로 결측값을 무시한다&lt;/h2&gt;
&lt;p&gt;R의 함수, 연산에서 &lt;code&gt;NA&lt;/code&gt;(결측값)가 포함된 경우 결과는 대부분 &lt;code&gt;NA&lt;/code&gt;이다.
Python의 경우 &lt;code&gt;np.nan&lt;/code&gt;(결측값)이 포함된 경우에 대부분 &lt;code&gt;np.nan&lt;/code&gt;를 제외하고 결과를 산출한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;파이썬의-import는-화일이름에-따라-달라야-한다&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;파이썬의 &lt;code&gt;import&lt;/code&gt;는 화일이름에 따라 달라야 한다&lt;/h2&gt;
&lt;p&gt;R에서 다른 파일의 소스(source) 코드를 사용하고자 하면 &lt;code&gt;source()&lt;/code&gt;를 하면 된다. 파이썬에서는 기본적으로 &lt;code&gt;import &amp;lt;filename&amp;gt;&lt;/code&gt;을 한다. 하지만 파일 이름(&lt;code&gt;&amp;lt;filename&amp;gt;&lt;/code&gt;)에 따라서 &lt;code&gt;import&lt;/code&gt;가 작동하지 않아서 다른 방법을 써야 하는 경우가 있다.&lt;/p&gt;
&lt;div id=&#34;import로-파이썬-코드를-불러올-수-없는-경우&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;import&lt;/code&gt;로 파이썬 코드를 불러올 수 없는 경우&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Python의 기본 모듈과 파일이름이 같을 경우&lt;/strong&gt; : &lt;code&gt;pwd.py&lt;/code&gt;, &lt;code&gt;sys.py&lt;/code&gt;, &lt;code&gt;time.py&lt;/code&gt;와 같이 파일명이 파이썬의 기본 모듈 이름과 같다면 &lt;code&gt;import&lt;/code&gt;를 사용할 수 없다. &lt;code&gt;import time&lt;/code&gt;을 하면 Python의 기본 모듈 time이 import된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;숫자로 시작하는 화일명&lt;/strong&gt; : 예를 들어 파일 이름이 &lt;code&gt;01_test.py&lt;/code&gt;라면 이를 &lt;code&gt;import 01_test&lt;/code&gt;로 불러들일 수 없다. 왜냐하면 &lt;code&gt;01_test&lt;/code&gt;가 &lt;strong&gt;객체 이름&lt;/strong&gt;으로 부적절하기 때문이다. &lt;code&gt;from 01_test import some_function&lt;/code&gt;과 같이 쓸 수도 없다. 이런 경우, 다음에서 소개하는 방법을 써야 한다. 이때 중요한 것은 모듈(&lt;code&gt;.py&lt;/code&gt; 파일)을 가리키는 변수 이름이 숫자로 시작하지 않아야 한다는 점이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;import-대신-사용할-수-있는-방법&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;import&lt;/code&gt; 대신 사용할 수 있는 방법&lt;/h3&gt;
&lt;div id=&#34;import__-내장함수-할용&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;__import__&lt;/code&gt; 내장함수 할용&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# 01_test 모듈을 가리키는 변수명을 module로 함.
module = __import__(&amp;#39;01_test&amp;#39;)
module.some_function()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;importlib-내장패키지-활용&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;importlib&lt;/code&gt; 내장패키지 활용&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import importlib
module = importlib.import_module(&amp;#39;01_test&amp;#39;)
module.some_function() &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;getattr을-이용하여-모듈-내-함수-불러들이기&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;getattr&lt;/code&gt;을 이용하여 모듈 내 함수 불러들이기&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import importlib
module = importlib.import_module(&amp;#39;01_test&amp;#39;)
func = getattr(module, &amp;#39;some_function&amp;#39;)
func()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;r에서는-다른-패키지를-언급할-일이-거의-없지만-파이썬은-그렇지-않다.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R에서는 다른 패키지를 언급할 일이 거의 없지만, 파이썬은 그렇지 않다.&lt;/h2&gt;
&lt;p&gt;R에서 어떤 패키지를 쓸 때, 다른 패키지를 언급할 일이 거의 없다. 물론 의존 관계에 있는 패키지들을 먼저 불러와야 하는 경우가 있지만 그 이후에는 어떤 패키지들을 불러들였는지 기억할 필요가 없다. 이에 반해, python에서 패키지 &lt;code&gt;pandas&lt;/code&gt;를 쓰려면 패키지 &lt;code&gt;numpy&lt;/code&gt;를 먼저 import하는 게 좋다. 왜냐하면 pandas에서 &lt;code&gt;np.nan&lt;/code&gt;을 쓸 일이 있는데, pandas를 import했다고 해서 numpy가 자동으로 &lt;code&gt;import&lt;/code&gt;되거나 &lt;code&gt;np.nan&lt;/code&gt;의 &lt;code&gt;nan&lt;/code&gt;을 자동으로 사용할 수 있는게 아니기 때문이다. (여기서 &lt;code&gt;np&lt;/code&gt;는 &lt;code&gt;numpy&lt;/code&gt;를 의미한다.)&lt;/p&gt;
&lt;p&gt;시각화 패키지인 &lt;code&gt;seaborn&lt;/code&gt;을 쓸 때에도 &lt;code&gt;matplotlib.pyplot&lt;/code&gt;을 먼저 임포트(import)하는게 좋다. 왜냐하면 시각화할 자료를 정한 후 &lt;code&gt;plt.show()&lt;/code&gt;를 해야 화면에 그래프가 그려지기 때문이다. (여기서 &lt;code&gt;plt&lt;/code&gt;는 &lt;code&gt;import matplotlib.pyplot as plt&lt;/code&gt;의 결과이다.)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;함수의-기본-인자값으로-리스트list를-쓰는-경우&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;함수의 기본 인자값으로 리스트(list)를 쓰는 경우&lt;/h2&gt;
&lt;p&gt;R의 경우를 기본값으로 리스트를 쓰면 다음과 같다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f = function(y, x= list()) {
    x = append(x,y)
    return(x)
}
f(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## [[1]]
## [1] 1
f(2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## [[1]]
## [1] 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python의 경우, &lt;strong&gt;함수 인자 기본값으로 리스트를 쓰면, 기본값이 변할 수 있다&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def f(y, x=[]):
    x.append(y)
    return x
f(1)
## [1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;f(2)
## [1, 2]
## 이 결과는 함수 f의 x= 기본값이 [1]일 때 결과와 같다.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;함수 &lt;code&gt;f&lt;/code&gt;의 디폴트(default) 인자는 &lt;code&gt;f.__defaults__&lt;/code&gt;에 저장되어 있다. 그래서 원한다면 &lt;code&gt;f.__defaults__=&lt;/code&gt;을 사용하여 함수 &lt;code&gt;f&lt;/code&gt; 인자의 기본값을 원하는대로 바꿀 수 있다. 어쨋든 &lt;code&gt;x=[]&lt;/code&gt;는 함수가 생성될 때 &lt;code&gt;f.__defaults__&lt;/code&gt;에 저장되고, 그 이후로는 &lt;code&gt;f.__defaults__&lt;/code&gt;의 값을 기본값으로 사용한다. &lt;code&gt;x=[]&lt;/code&gt;와 같이 기본값을 리스트로 하면, 리스트는 가변 객체이기 때문에 &lt;code&gt;f.__defaults__&lt;/code&gt;가 계속 변할 수 있다. 그래서 되도록 함수의 인자 기본값으로 리스트를 사용하지 않는다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;파이썬-클로져closure는-late-binding이다.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;파이썬 클로져(closure)는 late-binding이다.&lt;/h2&gt;
&lt;p&gt;closure를 사용하는 경우 R과 파이썬의 변수 할당 방식이 다르다. 클로져(closure)는 이 책의 범위를 넘어간다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;을-07로-쓰지-못한다.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;7&lt;/code&gt;을 &lt;code&gt;07&lt;/code&gt;로 쓰지 못한다.&lt;/h2&gt;
&lt;p&gt;자릿수를 맞추기 위해 수의 처음에 &lt;code&gt;0&lt;/code&gt;을 붙일 때가 있다. 하지만 Python에서는 수 앞에 &lt;code&gt;0&lt;/code&gt;을 붙일 수 없다.&lt;/p&gt;
&lt;p&gt;R에서는 &lt;code&gt;01&lt;/code&gt;, &lt;code&gt;02&lt;/code&gt;, &lt;code&gt;001&lt;/code&gt; 등을 입력하면 수 1,2,1로 인식한다. Python은 다르다.&lt;/p&gt;
&lt;p&gt;python은 기본적으로 10진수를 사용하고 있다. 2.x 버전까지는 8진수 정수를 나타낼 때 접두어 0을 붙였기 때문에, &lt;code&gt;010&lt;/code&gt;, &lt;code&gt;011&lt;/code&gt;를 수 8, 9로 인식했었다. 3.x 버전으로 넘어오면서 8진수를 나타내는 접두어 &lt;code&gt;0&lt;/code&gt;는 &lt;code&gt;0o&lt;/code&gt;로 변경되어 &lt;code&gt;0o10&lt;/code&gt;, &lt;code&gt;0o11&lt;/code&gt;은 수 8,9를 의미하고, &lt;code&gt;010&lt;/code&gt;과 &lt;code&gt;011&lt;/code&gt;은 SyntaxError를 발생시킨다. &lt;code&gt;oct()&lt;/code&gt;함수는 주어진 수를 8진수 표현으로 바꿔준다.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;#python 2.x
&amp;gt;&amp;gt;&amp;gt; oct(10)
&amp;#39;012&amp;#39;
#python 3.x
&amp;gt;&amp;gt;&amp;gt; oct(10)
&amp;#39;0o12&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그 밖에도 이진수(&lt;code&gt;0b&lt;/code&gt;,&lt;code&gt;0B&lt;/code&gt;), 16진수(&lt;code&gt;0x&lt;/code&gt;, &lt;code&gt;0X&lt;/code&gt;)를 나타내는 방법은 다음과 같다.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;0b11110, 0B11110 # 이진수 11110
0o36, 0O36       # 8진수 36
# 여기서 0O36의 첫 글자는 숫자 영, 두 번째 글자는 알파벳 대문자 오다.
0x1e, 0X1E       # 16진수 1e&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;0x1e12&lt;/code&gt;과 &lt;code&gt;01e12&lt;/code&gt;은 겉보기에 비슷해보이지만 실제 값은 매우 다르다. &lt;code&gt;0x1e12&lt;/code&gt;는 16진수 1e12(10진수 7698)이고 &lt;code&gt;01e12&lt;/code&gt;는 10진수 1000000000000(0이 12개)이다. 여기서 웃긴 것은 10진수 13을 &lt;code&gt;0013&lt;/code&gt;으로 쓸 수 없지만 &lt;code&gt;0013e0&lt;/code&gt;(&lt;code&gt;13*10**0&lt;/code&gt;)은 가능하다.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;0x1e12 # 16진수 1e12(10진수 7698)
01e12  # 1*10**12 = 10000_0000_0000&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;정수의-한계&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;정수의 한계&lt;/h2&gt;
&lt;p&gt;R의 최대 정수값은 다음과 같이 확인할 수 있다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;.Machine$integer.max&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2147483647&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;만약 2147483647+1을 한다면? 결과가 나오긴 하지만 정수가 될 수 없다. (&lt;code&gt;.Machine$integer.max&lt;/code&gt;는 컴퓨터의 하드웨어 사양에 따라 다를 수 있다.)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 여기서는 .Machine$integer.max가 2147483647인 경우이다.
class(2147483647+1)
## [1] &amp;quot;numeric&amp;quot;
as.integer(2147483647+1)
## Warning: NAs introduced by coercion to integer range
## [1] NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;파이썬 정수는 이런 한계가 없다.&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(9223372036854775807+1)
## &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;
type(100000000000000000000000000000000)
## &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;참고로 &lt;code&gt;sys.maxsize&lt;/code&gt;는 리스트 원소의 최대갯수이다.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import sys
sys.maxsize&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 9223372036854775807&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;행렬-또는-배열의-원소&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;행렬 또는 배열의 원소&lt;/h2&gt;
&lt;p&gt;R의 행렬 또는 배열은 첫 번째 차원이 가장 빠르게 바뀐다.
&lt;code&gt;c(1,2,3,4)&lt;/code&gt;를 2차원(2x2)의 배열 &lt;code&gt;a&lt;/code&gt;로 만들면
&lt;code&gt;a[1,1] = 1; a[2,1] = 2; a[1,2] = 3; a[2,2] = 4&lt;/code&gt;가 된다.
이런 방식은 &lt;strong&gt;F&lt;/strong&gt;ortran의 방식이므로 간단하게 &lt;code&gt;F&lt;/code&gt;라고 쓴다&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Python에서는 선택할 수 있지만, 기본적으로 가장 마지막 차원이 가장 빠르게 바뀐다.
위의 예에서 &lt;code&gt;a[0,0] = 1; a[0,1] = 2; a[1,0] = 3; a[1,1] = 4&lt;/code&gt;가 되는 방식이다. 이런 방식 컴퓨터 언어 &lt;strong&gt;C&lt;/strong&gt;의 방식이므로 간단하게 &lt;code&gt;C&lt;/code&gt;라고 쓴다.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np
x = np.array([1,2,3,4])
x.reshape((2,2)) # order = &amp;#39;C&amp;#39;와 같다.
x.reshape((2,2), order=&amp;#39;F&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[1, 2],
##        [3, 4]])
## array([[1, 3],
##        [2, 4]])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;ai-또는-bij-인덱싱indexing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;a[i]&lt;/code&gt; 또는 &lt;code&gt;b[i,j]&lt;/code&gt; : 인덱싱(indexing)&lt;/h2&gt;
&lt;p&gt;R에서 &lt;code&gt;a[i]&lt;/code&gt;는 &lt;code&gt;`[`(a, i)&lt;/code&gt;를 보기 좋게 적은 것이다.
&lt;code&gt;`[`(a, i)&lt;/code&gt;는 &lt;code&gt;`[`&lt;/code&gt;라는 함수에 인자로 &lt;code&gt;a&lt;/code&gt;와 &lt;code&gt;i&lt;/code&gt;를 넣은 것으로,
보통 &lt;code&gt;a&lt;/code&gt;라는 변수(객체)의 &lt;code&gt;i&lt;/code&gt;-번째 원소를 의미한다.&lt;/p&gt;
&lt;p&gt;Python에서 클래스(class) &lt;code&gt;A&lt;/code&gt;의 인스턴스(instance) &lt;code&gt;a&lt;/code&gt;&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;에 &lt;code&gt;a[i]&lt;/code&gt;를 하면,
&lt;code&gt;A&lt;/code&gt;의 특별한 메소드(special method)인 &lt;code&gt;.__getitem(self, i)&lt;/code&gt;가 실행된다. 그래서 &lt;code&gt;a[i]&lt;/code&gt;는 &lt;code&gt;a.__getitem__(i)&lt;/code&gt;의 결과이다. 이 역시 보통 &lt;code&gt;a&lt;/code&gt;의 &lt;code&gt;i&lt;/code&gt;-번째 원소를 의미한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;r의-과-파이썬의&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R의 &lt;code&gt;:&lt;/code&gt;과 파이썬의 &lt;code&gt;:&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;R에서 &lt;code&gt;:&lt;/code&gt;은 &lt;code&gt;seq()&lt;/code&gt; 함수를 간편하게 표기하는 방법이다.
R에서 &lt;code&gt;1:3&lt;/code&gt;은 &lt;code&gt;c(1,2,3)&lt;/code&gt;이고 &lt;code&gt;3:1&lt;/code&gt;은 &lt;code&gt;c(3,2,1)&lt;/code&gt;이다.&lt;/p&gt;
&lt;p&gt;파이썬에 &lt;code&gt;:&lt;/code&gt;은 &lt;code&gt;slice()&lt;/code&gt; 함수를 간편하게 표기하는 방법이며, &lt;code&gt;[&lt;/code&gt;과 &lt;code&gt;]&lt;/code&gt; 안에서만 사용할 수 있다.
파이썬에서 &lt;code&gt;a[0:3]&lt;/code&gt;은 &lt;code&gt;a[0]&lt;/code&gt;, &lt;code&gt;a[1]&lt;/code&gt;, &lt;code&gt;a[2]&lt;/code&gt;을 의미하고,
&lt;code&gt;a[3:0]&lt;/code&gt;은 &lt;code&gt;None&lt;/code&gt;이다. &lt;code&gt;a[2::-1]&lt;/code&gt;을 해야 &lt;code&gt;a[2]&lt;/code&gt;, &lt;code&gt;a[1]&lt;/code&gt;, &lt;code&gt;a[0]&lt;/code&gt;이 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;strong&gt;P&lt;/strong&gt;ython &lt;strong&gt;E&lt;/strong&gt;nhancement &lt;strong&gt;P&lt;/strong&gt;roposal&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;어떻게 정수의 크기에 한계가 없을 수 있을까? &lt;code&gt;https://rushter.com/blog/python-integer-implementation/&lt;/code&gt; 을 참조하자.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;포트란(Fortan)은 과거에 수치 계산을 위해 많이 쓰던 컴퓨터 언어.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;&lt;code&gt;a = A(...)&lt;/code&gt;의 실행 결과.&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>